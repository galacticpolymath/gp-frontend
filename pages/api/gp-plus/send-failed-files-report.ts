import { NextApiRequest, NextApiResponse } from 'next';
import { getJwtPayloadPromise } from '../../../nondependencyFns';
import { CustomError } from '../../../backend/utils/errors';
import { TFileToCopy } from '../../../backend/services/gdriveServices/types';
import { sendEmailViaBrevo } from '../../../backend/services/emailServicesWithTypes';
import { createEmailTemplate } from '../../../backend/emailTemplates/genericEmailTemplate';
import { SUPPORT_EMAIL } from '../../../shared/constants';

export interface FailedFilesReportRequest {
  failedFiles: TFileToCopy[];
  lessonName: string;
  unitName: string;
  timestamp: string;
  userAgent: string;
}

export default async function handler(
  request: NextApiRequest,
  response: NextApiResponse
) {
  if (request.method !== 'POST') {
    return response.status(405).json({ message: 'Method not allowed' });
  }

  try {
    console.log('Received request to send failed files report email');

    const jwtPayload = await getJwtPayloadPromise(
      request.headers.authorization
    );

    if (!jwtPayload) {
      throw new CustomError('Unauthorized. Please log in again.', 401);
    }

    const { lessonName, unitName } = request.body;

    if (!lessonName || !unitName) {
      throw new CustomError(
        'Missing lessonName or unitName in request body',
        400
      );
    }

    const { failedFiles, timestamp, userAgent }: FailedFilesReportRequest = request.body;

    if (
      !failedFiles ||
      !Array.isArray(failedFiles) ||
      failedFiles.length === 0
    ) {
      throw new CustomError('No failed files provided', 400);
    }

    const userEmail = jwtPayload.payload.email;
    const firstName = jwtPayload.payload.name?.first || 'User';
    const fileListHtml = failedFiles
      .map(
        (file, index) => `
        <tr>
          <td>${index + 1}</td>
          <td>${file.name}</td>
          <td>${file.id || 'Unknown'}</td>
        </tr>
      `
      )
      .join('');
    const emailHtml = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #dc3545;">Failed File Copy Report</h2>
        
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
          <h3 style="margin-top: 0; color: #495057;">Report Details</h3>
          <p><strong>User:</strong> ${firstName} (${userEmail})</p>
          <p><strong>Report Time:</strong> ${new Date(
    timestamp
  ).toLocaleString()}</p>
          <p><strong>User Agent:</strong> ${userAgent}</p>
          <p><strong>Number of Failed Files:</strong> ${failedFiles.length}</p>
          <p><strong>Unit: </strong> ${unitName}</p>
          <p><strong>Lesson: </strong> ${lessonName}</p>
        </div>

        <h3 style="color: #495057;">Failed Files List</h3>
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
          <thead>
            <tr style="background-color: #e9ecef;">
              <th style="border: 1px solid #dee2e6; padding: 8px; text-align: left;">#</th>
              <th style="border: 1px solid #dee2e6; padding: 8px; text-align: left;">File Name</th>
              <th style="border: 1px solid #dee2e6; padding: 8px; text-align: left;">File ID</th>
            </tr>
          </thead>
          <tbody>
            ${fileListHtml}
          </tbody>
        </table>

        <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px;">
          <h4 style="margin-top: 0; color: #856404;">Action Required</h4>
          <p style="margin-bottom: 0; color: #856404;">
            Please investigate why these files failed to copy and help the user resolve the issue.
            Common causes include permission problems, file size limits, or temporary Google Drive issues.
          </p>
        </div>

        <hr style="margin: 20px 0; border: none; border-top: 1px solid #dee2e6;">
        
        <p style="color: #6c757d; font-size: 12px;">
          This report was automatically generated by the GP+ lesson copying system.
        </p>
      </div>
    `;
    const htmlContentForSupportEmail = createEmailTemplate({
      headerTitle: `'${lessonName}' of '${unitName}' failed to copy.`,
      body: emailHtml,
      farewellMsg: '',
      greetings: '',
      title: `'${lessonName}' of '${unitName}' failed to copy.`,
    });

    console.log('Preparing to send a failed files report email to support team...');

    // Send email to support team
    const emailResult = await sendEmailViaBrevo({
      sender: {
        name: 'Support',
        email: 'techguy@galacticpolymath.com',
      },
      to: [
        {
          name: 'Support',
          email: 'techguy@galacticpolymath.com',
        },
      ],
      htmlContent: htmlContentForSupportEmail,
      subject: `GP+ Failed File Copy Report - ${firstName} (${failedFiles.length} files)`,
    });

    if (!emailResult.wasSuccessful) {
      throw new CustomError('Failed to send email report to support.', 500);
    }

    const userCopyHtml = `
<p>This is a confirmation that we have received your report about ${
  failedFiles.length > 1 ? `${failedFiles.length} files` : `${failedFiles.length} file`
} that failed to copy during your GP+ lesson copying process for lesson '${lessonName}' of unit '${unitName}'.</p>

<p>Failed copied files:</p>
<div style="padding-left:5px;">
    ${failedFiles
    .map((file, index) => `<p>${index + 1}. ${file.name}</p>`)
    .join('\n')}
</div>

<p>Our support team has been notified and will investigate the issue. We'll get back to you as soon as possible to help resolve this.</p>
      `;

    console.log('Preparing to send a confirmation email to the user who reported the failed files...');

    console.log('firstName, sup there: ', firstName);

    const emailSendResultForUser = await sendEmailViaBrevo({
      htmlContent: createEmailTemplate({
        body: userCopyHtml,
        farewellMsg: '<p>Thanks, <br>The Galactic Polymath Team</p>',
        greetings: firstName === 'User' ? 'Hello,' : `Hello ${firstName},`,
        headerTitle: 'Bug report sent.',
        title: 'Bug report sent.',
      }),
      sender: {
        email: SUPPORT_EMAIL,
        name: 'Support',
      },
      subject: 'Bug report sent.',
      to: [
        {
          email: userEmail,
          name: firstName,
        },
      ],
    });

    if (!emailSendResultForUser.wasSuccessful) {
      throw new CustomError('Failed to send email report to target user.', 500);
    }

    return response.status(200).json({
      wasSuccessful: true,
      message: 'Report sent successfully',
    });
  } catch (error: any) {
    console.error('Error sending failed files report: ', error);

    const { message, code } = error ?? {};

    return response.status(code || 500).json({
      wasSuccessful: false,
      message: message || 'Failed to send report',
    });
  }
}
